// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package discordgo

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson692db02bDecodeGithubComJonas747Discordgo(in *jlexer.Lexer, out *PresenceUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild_id":
			out.GuildID = int64(in.Int64Str())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjson692db02bDecodeGithubComJonas747Discordgo1(in, out.User)
			}
		case "status":
			out.Status = Status(in.String())
		case "activities":
			if in.IsNull() {
				in.Skip()
				out.Activities = nil
			} else {
				in.Delim('[')
				if out.Activities == nil {
					if !in.IsDelim(']') {
						out.Activities = make(Activities, 0, 8)
					} else {
						out.Activities = Activities{}
					}
				} else {
					out.Activities = (out.Activities)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Game
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Game)
						}
						easyjson692db02bDecodeGithubComJonas747Discordgo2(in, v1)
					}
					out.Activities = append(out.Activities, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo(out *jwriter.Writer, in PresenceUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"guild_id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.GuildID))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGithubComJonas747Discordgo1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"activities\":"
		out.RawString(prefix)
		if in.Activities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Activities {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComJonas747Discordgo2(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PresenceUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComJonas747Discordgo(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PresenceUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComJonas747Discordgo(l, v)
}
func easyjson692db02bDecodeGithubComJonas747Discordgo2(in *jlexer.Lexer, out *Game) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = GameType(in.Int())
		case "url":
			out.URL = string(in.String())
		case "details":
			out.Details = string(in.String())
		case "state":
			out.State = string(in.String())
		case "timestamps":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStamps).UnmarshalJSON(data))
			}
		case "assets":
			easyjson692db02bDecodeGithubComJonas747Discordgo3(in, &out.Assets)
		case "application_id":
			out.ApplicationID = string(in.String())
		case "instance":
			out.Instance = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo2(out *jwriter.Writer, in Game) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	if in.Details != "" {
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		out.String(string(in.Details))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	if true {
		const prefix string = ",\"timestamps\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGithubComJonas747Discordgo3(out, in.TimeStamps)
	}
	if true {
		const prefix string = ",\"assets\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGithubComJonas747Discordgo4(out, in.Assets)
	}
	if in.ApplicationID != "" {
		const prefix string = ",\"application_id\":"
		out.RawString(prefix)
		out.String(string(in.ApplicationID))
	}
	if in.Instance != 0 {
		const prefix string = ",\"instance\":"
		out.RawString(prefix)
		out.Int8(int8(in.Instance))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComJonas747Discordgo4(in *jlexer.Lexer, out *TimeStamps) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "end":
			out.EndTimestamp = int64(in.Int64())
		case "start":
			out.StartTimestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo3(out *jwriter.Writer, in TimeStamps) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EndTimestamp != 0 {
		const prefix string = ",\"end\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.EndTimestamp))
	}
	if in.StartTimestamp != 0 {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartTimestamp))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComJonas747Discordgo3(in *jlexer.Lexer, out *Assets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "large_image":
			out.LargeImageID = string(in.String())
		case "small_image":
			out.SmallImageID = string(in.String())
		case "large_text":
			out.LargeText = string(in.String())
		case "small_text":
			out.SmallText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo4(out *jwriter.Writer, in Assets) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LargeImageID != "" {
		const prefix string = ",\"large_image\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.LargeImageID))
	}
	if in.SmallImageID != "" {
		const prefix string = ",\"small_image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SmallImageID))
	}
	if in.LargeText != "" {
		const prefix string = ",\"large_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LargeText))
	}
	if in.SmallText != "" {
		const prefix string = ",\"small_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SmallText))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComJonas747Discordgo1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "username":
			out.Username = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "locale":
			out.Locale = string(in.String())
		case "discriminator":
			out.Discriminator = string(in.String())
		case "bot":
			out.Bot = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"locale\":"
		out.RawString(prefix)
		out.String(string(in.Locale))
	}
	{
		const prefix string = ",\"discriminator\":"
		out.RawString(prefix)
		out.String(string(in.Discriminator))
	}
	{
		const prefix string = ",\"bot\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bot))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComJonas747Discordgo5(in *jlexer.Lexer, out *GuildCreate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Guild = new(Guild)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "preferred_locale":
			out.PreferredLocale = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "afk_channel_id":
			out.AfkChannelID = int64(in.Int64Str())
		case "owner_id":
			out.OwnerID = int64(in.Int64Str())
		case "joined_at":
			out.JoinedAt = Timestamp(in.String())
		case "splash":
			out.Splash = string(in.String())
		case "afk_timeout":
			out.AfkTimeout = int(in.Int())
		case "member_count":
			out.MemberCount = int(in.Int())
		case "verification_level":
			out.VerificationLevel = VerificationLevel(in.Int())
		case "large":
			out.Large = bool(in.Bool())
		case "default_message_notifications":
			out.DefaultMessageNotifications = int(in.Int())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]*Role, 0, 8)
					} else {
						out.Roles = []*Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Role
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Role)
						}
						easyjson692db02bDecodeGithubComJonas747Discordgo6(in, v4)
					}
					out.Roles = append(out.Roles, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "emojis":
			if in.IsNull() {
				in.Skip()
				out.Emojis = nil
			} else {
				in.Delim('[')
				if out.Emojis == nil {
					if !in.IsDelim(']') {
						out.Emojis = make([]*Emoji, 0, 8)
					} else {
						out.Emojis = []*Emoji{}
					}
				} else {
					out.Emojis = (out.Emojis)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Emoji
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Emoji)
						}
						easyjson692db02bDecodeGithubComJonas747Discordgo7(in, v5)
					}
					out.Emojis = append(out.Emojis, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*Member, 0, 8)
					} else {
						out.Members = []*Member{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *Member
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(Member)
						}
						easyjson692db02bDecodeGithubComJonas747Discordgo8(in, v6)
					}
					out.Members = append(out.Members, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "presences":
			if in.IsNull() {
				in.Skip()
				out.Presences = nil
			} else {
				in.Delim('[')
				if out.Presences == nil {
					if !in.IsDelim(']') {
						out.Presences = make([]*Presence, 0, 8)
					} else {
						out.Presences = []*Presence{}
					}
				} else {
					out.Presences = (out.Presences)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Presence
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Presence)
						}
						easyjson692db02bDecodeGithubComJonas747Discordgo9(in, v7)
					}
					out.Presences = append(out.Presences, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "channels":
			if in.IsNull() {
				in.Skip()
				out.Channels = nil
			} else {
				in.Delim('[')
				if out.Channels == nil {
					if !in.IsDelim(']') {
						out.Channels = make([]*Channel, 0, 8)
					} else {
						out.Channels = []*Channel{}
					}
				} else {
					out.Channels = (out.Channels)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *Channel
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(Channel)
						}
						easyjson692db02bDecodeGithubComJonas747Discordgo10(in, v8)
					}
					out.Channels = append(out.Channels, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "voice_states":
			if in.IsNull() {
				in.Skip()
				out.VoiceStates = nil
			} else {
				in.Delim('[')
				if out.VoiceStates == nil {
					if !in.IsDelim(']') {
						out.VoiceStates = make([]*VoiceState, 0, 8)
					} else {
						out.VoiceStates = []*VoiceState{}
					}
				} else {
					out.VoiceStates = (out.VoiceStates)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *VoiceState
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(VoiceState)
						}
						easyjson692db02bDecodeGithubComJonas747Discordgo11(in, v9)
					}
					out.VoiceStates = append(out.VoiceStates, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "max_presences":
			out.MaxPresences = int(in.Int())
		case "max_members":
			out.MaxMembers = int(in.Int())
		case "unavailable":
			out.Unavailable = bool(in.Bool())
		case "explicit_content_filter":
			out.ExplicitContentFilter = ExplicitContentFilterLevel(in.Int())
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]string, 0, 4)
					} else {
						out.Features = []string{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Features = append(out.Features, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mfa_level":
			out.MfaLevel = MfaLevel(in.Int())
		case "widget_enabled":
			out.WidgetEnabled = bool(in.Bool())
		case "widget_channel_id":
			out.WidgetChannelID = string(in.String())
		case "system_channel_id":
			out.SystemChannelID = string(in.String())
		case "approximate_member_count":
			out.ApproximateMemberCount = int(in.Int())
		case "approximate_presence_count":
			out.ApproximatePresenceCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo5(out *jwriter.Writer, in GuildCreate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"preferred_locale\":"
		out.RawString(prefix)
		out.String(string(in.PreferredLocale))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"afk_channel_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.AfkChannelID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.OwnerID))
	}
	{
		const prefix string = ",\"joined_at\":"
		out.RawString(prefix)
		out.String(string(in.JoinedAt))
	}
	{
		const prefix string = ",\"splash\":"
		out.RawString(prefix)
		out.String(string(in.Splash))
	}
	{
		const prefix string = ",\"afk_timeout\":"
		out.RawString(prefix)
		out.Int(int(in.AfkTimeout))
	}
	{
		const prefix string = ",\"member_count\":"
		out.RawString(prefix)
		out.Int(int(in.MemberCount))
	}
	{
		const prefix string = ",\"verification_level\":"
		out.RawString(prefix)
		out.Int(int(in.VerificationLevel))
	}
	{
		const prefix string = ",\"large\":"
		out.RawString(prefix)
		out.Bool(bool(in.Large))
	}
	{
		const prefix string = ",\"default_message_notifications\":"
		out.RawString(prefix)
		out.Int(int(in.DefaultMessageNotifications))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Roles {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComJonas747Discordgo6(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"emojis\":"
		out.RawString(prefix)
		if in.Emojis == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Emojis {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComJonas747Discordgo7(out, *v14)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Members {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComJonas747Discordgo8(out, *v16)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"presences\":"
		out.RawString(prefix)
		if in.Presences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Presences {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComJonas747Discordgo9(out, *v18)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"channels\":"
		out.RawString(prefix)
		if in.Channels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Channels {
				if v19 > 0 {
					out.RawByte(',')
				}
				if v20 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComJonas747Discordgo10(out, *v20)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"voice_states\":"
		out.RawString(prefix)
		if in.VoiceStates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.VoiceStates {
				if v21 > 0 {
					out.RawByte(',')
				}
				if v22 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComJonas747Discordgo11(out, *v22)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"max_presences\":"
		out.RawString(prefix)
		out.Int(int(in.MaxPresences))
	}
	{
		const prefix string = ",\"max_members\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMembers))
	}
	{
		const prefix string = ",\"unavailable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Unavailable))
	}
	{
		const prefix string = ",\"explicit_content_filter\":"
		out.RawString(prefix)
		out.Int(int(in.ExplicitContentFilter))
	}
	{
		const prefix string = ",\"features\":"
		out.RawString(prefix)
		if in.Features == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Features {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mfa_level\":"
		out.RawString(prefix)
		out.Int(int(in.MfaLevel))
	}
	{
		const prefix string = ",\"widget_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.WidgetEnabled))
	}
	{
		const prefix string = ",\"widget_channel_id\":"
		out.RawString(prefix)
		out.String(string(in.WidgetChannelID))
	}
	{
		const prefix string = ",\"system_channel_id\":"
		out.RawString(prefix)
		out.String(string(in.SystemChannelID))
	}
	{
		const prefix string = ",\"approximate_member_count\":"
		out.RawString(prefix)
		out.Int(int(in.ApproximateMemberCount))
	}
	{
		const prefix string = ",\"approximate_presence_count\":"
		out.RawString(prefix)
		out.Int(int(in.ApproximatePresenceCount))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuildCreate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComJonas747Discordgo5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuildCreate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComJonas747Discordgo5(l, v)
}
func easyjson692db02bDecodeGithubComJonas747Discordgo11(in *jlexer.Lexer, out *VoiceState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int64(in.Int64Str())
		case "session_id":
			out.SessionID = string(in.String())
		case "channel_id":
			out.ChannelID = int64(in.Int64Str())
		case "guild_id":
			out.GuildID = int64(in.Int64Str())
		case "suppress":
			out.Suppress = bool(in.Bool())
		case "self_mute":
			out.SelfMute = bool(in.Bool())
		case "self_deaf":
			out.SelfDeaf = bool(in.Bool())
		case "mute":
			out.Mute = bool(in.Bool())
		case "deaf":
			out.Deaf = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo11(out *jwriter.Writer, in VoiceState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.UserID))
	}
	{
		const prefix string = ",\"session_id\":"
		out.RawString(prefix)
		out.String(string(in.SessionID))
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.ChannelID))
	}
	{
		const prefix string = ",\"guild_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.GuildID))
	}
	{
		const prefix string = ",\"suppress\":"
		out.RawString(prefix)
		out.Bool(bool(in.Suppress))
	}
	{
		const prefix string = ",\"self_mute\":"
		out.RawString(prefix)
		out.Bool(bool(in.SelfMute))
	}
	{
		const prefix string = ",\"self_deaf\":"
		out.RawString(prefix)
		out.Bool(bool(in.SelfDeaf))
	}
	{
		const prefix string = ",\"mute\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mute))
	}
	{
		const prefix string = ",\"deaf\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deaf))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComJonas747Discordgo10(in *jlexer.Lexer, out *Channel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "guild_id":
			out.GuildID = int64(in.Int64Str())
		case "name":
			out.Name = string(in.String())
		case "topic":
			out.Topic = string(in.String())
		case "type":
			out.Type = ChannelType(in.Int())
		case "last_message_id":
			out.LastMessageID = int64(in.Int64Str())
		case "nsfw":
			out.NSFW = bool(in.Bool())
		case "icon":
			out.Icon = string(in.String())
		case "position":
			out.Position = int(in.Int())
		case "bitrate":
			out.Bitrate = int(in.Int())
		case "recipients":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]*User, 0, 8)
					} else {
						out.Recipients = []*User{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *User
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(User)
						}
						easyjson692db02bDecodeGithubComJonas747Discordgo1(in, v25)
					}
					out.Recipients = append(out.Recipients, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permission_overwrites":
			if in.IsNull() {
				in.Skip()
				out.PermissionOverwrites = nil
			} else {
				in.Delim('[')
				if out.PermissionOverwrites == nil {
					if !in.IsDelim(']') {
						out.PermissionOverwrites = make([]*PermissionOverwrite, 0, 8)
					} else {
						out.PermissionOverwrites = []*PermissionOverwrite{}
					}
				} else {
					out.PermissionOverwrites = (out.PermissionOverwrites)[:0]
				}
				for !in.IsDelim(']') {
					var v26 *PermissionOverwrite
					if in.IsNull() {
						in.Skip()
						v26 = nil
					} else {
						if v26 == nil {
							v26 = new(PermissionOverwrite)
						}
						easyjson692db02bDecodeGithubComJonas747Discordgo12(in, v26)
					}
					out.PermissionOverwrites = append(out.PermissionOverwrites, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_limit":
			out.UserLimit = int(in.Int())
		case "parent_id":
			out.ParentID = int64(in.Int64Str())
		case "rate_limit_per_user":
			out.RateLimitPerUser = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo10(out *jwriter.Writer, in Channel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"guild_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.GuildID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"last_message_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.LastMessageID))
	}
	{
		const prefix string = ",\"nsfw\":"
		out.RawString(prefix)
		out.Bool(bool(in.NSFW))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Int(int(in.Position))
	}
	{
		const prefix string = ",\"bitrate\":"
		out.RawString(prefix)
		out.Int(int(in.Bitrate))
	}
	{
		const prefix string = ",\"recipients\":"
		out.RawString(prefix)
		if in.Recipients == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Recipients {
				if v27 > 0 {
					out.RawByte(',')
				}
				if v28 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComJonas747Discordgo1(out, *v28)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permission_overwrites\":"
		out.RawString(prefix)
		if in.PermissionOverwrites == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.PermissionOverwrites {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComJonas747Discordgo12(out, *v30)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user_limit\":"
		out.RawString(prefix)
		out.Int(int(in.UserLimit))
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.ParentID))
	}
	{
		const prefix string = ",\"rate_limit_per_user\":"
		out.RawString(prefix)
		out.Int(int(in.RateLimitPerUser))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComJonas747Discordgo12(in *jlexer.Lexer, out *PermissionOverwrite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "type":
			out.Type = PermissionOverwriteType(in.Int())
		case "deny":
			out.Deny = int64(in.Int64Str())
		case "allow":
			out.Allow = int64(in.Int64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo12(out *jwriter.Writer, in PermissionOverwrite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"deny\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.Deny))
	}
	{
		const prefix string = ",\"allow\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.Allow))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComJonas747Discordgo9(in *jlexer.Lexer, out *Presence) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjson692db02bDecodeGithubComJonas747Discordgo1(in, out.User)
			}
		case "status":
			out.Status = Status(in.String())
		case "activities":
			if in.IsNull() {
				in.Skip()
				out.Activities = nil
			} else {
				in.Delim('[')
				if out.Activities == nil {
					if !in.IsDelim(']') {
						out.Activities = make(Activities, 0, 8)
					} else {
						out.Activities = Activities{}
					}
				} else {
					out.Activities = (out.Activities)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *Game
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(Game)
						}
						easyjson692db02bDecodeGithubComJonas747Discordgo2(in, v31)
					}
					out.Activities = append(out.Activities, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo9(out *jwriter.Writer, in Presence) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGithubComJonas747Discordgo1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"activities\":"
		out.RawString(prefix)
		if in.Activities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Activities {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComJonas747Discordgo2(out, *v33)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComJonas747Discordgo8(in *jlexer.Lexer, out *Member) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild_id":
			out.GuildID = int64(in.Int64Str())
		case "joined_at":
			out.JoinedAt = Timestamp(in.String())
		case "nick":
			out.Nick = string(in.String())
		case "deaf":
			out.Deaf = bool(in.Bool())
		case "mute":
			out.Mute = bool(in.Bool())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjson692db02bDecodeGithubComJonas747Discordgo1(in, out.User)
			}
		case "roles":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Roles).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo8(out *jwriter.Writer, in Member) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"guild_id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.GuildID))
	}
	{
		const prefix string = ",\"joined_at\":"
		out.RawString(prefix)
		out.String(string(in.JoinedAt))
	}
	{
		const prefix string = ",\"nick\":"
		out.RawString(prefix)
		out.String(string(in.Nick))
	}
	{
		const prefix string = ",\"deaf\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deaf))
	}
	{
		const prefix string = ",\"mute\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mute))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGithubComJonas747Discordgo1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		out.Raw((in.Roles).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComJonas747Discordgo7(in *jlexer.Lexer, out *Emoji) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "name":
			out.Name = string(in.String())
		case "roles":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Roles).UnmarshalJSON(data))
			}
		case "managed":
			out.Managed = bool(in.Bool())
		case "require_colons":
			out.RequireColons = bool(in.Bool())
		case "animated":
			out.Animated = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo7(out *jwriter.Writer, in Emoji) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		out.Raw((in.Roles).MarshalJSON())
	}
	{
		const prefix string = ",\"managed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Managed))
	}
	{
		const prefix string = ",\"require_colons\":"
		out.RawString(prefix)
		out.Bool(bool(in.RequireColons))
	}
	{
		const prefix string = ",\"animated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Animated))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComJonas747Discordgo6(in *jlexer.Lexer, out *Role) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "name":
			out.Name = string(in.String())
		case "managed":
			out.Managed = bool(in.Bool())
		case "mentionable":
			out.Mentionable = bool(in.Bool())
		case "hoist":
			out.Hoist = bool(in.Bool())
		case "color":
			out.Color = int(in.Int())
		case "position":
			out.Position = int(in.Int())
		case "permissions":
			out.Permissions = int64(in.Int64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComJonas747Discordgo6(out *jwriter.Writer, in Role) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"managed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Managed))
	}
	{
		const prefix string = ",\"mentionable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mentionable))
	}
	{
		const prefix string = ",\"hoist\":"
		out.RawString(prefix)
		out.Bool(bool(in.Hoist))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.Int(int(in.Color))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Int(int(in.Position))
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.Permissions))
	}
	out.RawByte('}')
}
